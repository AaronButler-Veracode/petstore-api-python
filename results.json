{
  "_links": {
    "root": {
      "href": "/"
    },
    "self": {
      "href": "/scans/78ca0f72-5d2c-4a32-bec0-9b3bcbf53d94/findings"
    },
    "help": {
      "href": "https://help.veracode.com/reader/tS9CaFwL4_lbIEWWomsJoA/ovfZGgu96UINQxIuTqRDwg"
    }
  },
  "scan_id": "78ca0f72-5d2c-4a32-bec0-9b3bcbf53d94",
  "scan_status": "SUCCESS",
  "message": "Scan successful. Results size: 27645 bytes",
  "modules": [
    "Python files within petstore-api-python.zip"
  ],
  "modules_count": 1,
  "findings": [
    {
      "cwe_id": "489",
      "display_text": "\u003cspan\u003eThe flask.app.run() method may be leftover debug code that creates an unintended entry point in a web application.  Although this is an acceptable practice during product development, classes that are part of a production J2EE application should not define a main() method.  Whether this method can be remotely invoked depends on the configuration of the J2EE container and the application itself.\u003c/span\u003e \u003cspan\u003eEliminate unnecessary entry points in deployed web applications to reduce the attack surface.  Ensure that this is not a backdoor disguised as debugging functionality.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/489.html\"\u003eCWE\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "api.py",
          "function_prototype": "",
          "line": 478,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1000,
      "issue_type": "Leftover Debug Code",
      "issue_type_id": "sink",
      "severity": 3,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "debug_code_flask_python_489"
    },
    {
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to flaskext.mysql.MySQL.cursors.Cursor.execute() constructs a dynamic SQL query using a variable derived from user-supplied input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "api.py",
          "function_name": "addUser",
          "function_prototype": "",
          "line": 48,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1001,
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "issue_type_id": "taint",
      "severity": 4,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "sql_injection_python_89"
    },
    {
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to flaskext.mysql.MySQL.cursors.Cursor.execute() constructs a dynamic SQL query using a variable derived from user-supplied input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "api.py",
          "function_name": "addUser",
          "function_prototype": "",
          "line": 55,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1002,
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "issue_type_id": "taint",
      "severity": 4,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "sql_injection_python_89"
    },
    {
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to flaskext.mysql.MySQL.cursors.Cursor.execute() constructs a dynamic SQL query using a variable derived from user-supplied input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "api.py",
          "function_name": "login",
          "function_prototype": "",
          "line": 71,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1003,
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "issue_type_id": "taint",
      "severity": 4,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "sql_injection_python_89"
    },
    {
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to flaskext.mysql.MySQL.cursors.Cursor.execute() constructs a dynamic SQL query using a variable derived from user-supplied input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "api.py",
          "function_name": "updateUser",
          "function_prototype": "",
          "line": 105,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1004,
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "issue_type_id": "taint",
      "severity": 4,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "sql_injection_python_89"
    },
    {
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to flaskext.mysql.MySQL.cursors.Cursor.execute() constructs a dynamic SQL query using a variable derived from user-supplied input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "api.py",
          "function_name": "updateUser",
          "function_prototype": "",
          "line": 108,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1005,
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "issue_type_id": "taint",
      "severity": 4,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "sql_injection_python_89"
    },
    {
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to flaskext.mysql.MySQL.cursors.Cursor.execute() constructs a dynamic SQL query using a variable derived from user-supplied input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "api.py",
          "function_name": "oneUser",
          "function_prototype": "",
          "line": 136,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1006,
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "issue_type_id": "taint",
      "severity": 4,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "sql_injection_python_89"
    },
    {
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to flaskext.mysql.MySQL.cursors.Cursor.execute() constructs a dynamic SQL query using a variable derived from user-supplied input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "api.py",
          "function_name": "deleteUser",
          "function_prototype": "",
          "line": 153,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1007,
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "issue_type_id": "taint",
      "severity": 4,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "sql_injection_python_89"
    },
    {
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to flaskext.mysql.MySQL.cursors.Cursor.execute() constructs a dynamic SQL query using a variable derived from user-supplied input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "api.py",
          "function_name": "deleteUser",
          "function_prototype": "",
          "line": 156,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1008,
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "issue_type_id": "taint",
      "severity": 4,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "sql_injection_python_89"
    },
    {
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to flaskext.mysql.MySQL.cursors.Cursor.execute() constructs a dynamic SQL query using a variable derived from user-supplied input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "api.py",
          "function_name": "addPet",
          "function_prototype": "",
          "line": 184,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1009,
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "issue_type_id": "taint",
      "severity": 4,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "sql_injection_python_89"
    },
    {
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to flaskext.mysql.MySQL.cursors.Cursor.execute() constructs a dynamic SQL query using a variable derived from user-supplied input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "api.py",
          "function_name": "onePet",
          "function_prototype": "",
          "line": 198,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1010,
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "issue_type_id": "taint",
      "severity": 4,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "sql_injection_python_89"
    },
    {
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to flaskext.mysql.MySQL.cursors.Cursor.execute() constructs a dynamic SQL query using a variable derived from user-supplied input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "api.py",
          "function_name": "deletePet",
          "function_prototype": "",
          "line": 214,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1011,
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "issue_type_id": "taint",
      "severity": 4,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "sql_injection_python_89"
    },
    {
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to flaskext.mysql.MySQL.cursors.Cursor.execute() constructs a dynamic SQL query using a variable derived from user-supplied input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "api.py",
          "function_name": "deletePet",
          "function_prototype": "",
          "line": 217,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1012,
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "issue_type_id": "taint",
      "severity": 4,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "sql_injection_python_89"
    },
    {
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to flaskext.mysql.MySQL.cursors.Cursor.execute() constructs a dynamic SQL query using a variable derived from user-supplied input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "api.py",
          "function_name": "findByStatus",
          "function_prototype": "",
          "line": 236,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1013,
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "issue_type_id": "taint",
      "severity": 4,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "sql_injection_python_89"
    },
    {
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to flaskext.mysql.MySQL.cursors.Cursor.execute() constructs a dynamic SQL query using a variable derived from user-supplied input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "api.py",
          "function_name": "updatePet",
          "function_prototype": "",
          "line": 260,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1014,
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "issue_type_id": "taint",
      "severity": 4,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "sql_injection_python_89"
    },
    {
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to flaskext.mysql.MySQL.cursors.Cursor.execute() constructs a dynamic SQL query using a variable derived from user-supplied input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "api.py",
          "function_name": "updatePet",
          "function_prototype": "",
          "line": 263,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1015,
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "issue_type_id": "taint",
      "severity": 4,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "sql_injection_python_89"
    },
    {
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to flaskext.mysql.MySQL.cursors.Cursor.execute() constructs a dynamic SQL query using a variable derived from user-supplied input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "api.py",
          "function_name": "addOrder",
          "function_prototype": "",
          "line": 290,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1016,
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "issue_type_id": "taint",
      "severity": 4,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "sql_injection_python_89"
    },
    {
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to flaskext.mysql.MySQL.cursors.Cursor.execute() constructs a dynamic SQL query using a variable derived from user-supplied input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "api.py",
          "function_name": "oneOrder",
          "function_prototype": "",
          "line": 305,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1017,
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "issue_type_id": "taint",
      "severity": 4,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "sql_injection_python_89"
    },
    {
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to flaskext.mysql.MySQL.cursors.Cursor.execute() constructs a dynamic SQL query using a variable derived from user-supplied input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "api.py",
          "function_name": "deleteOrder",
          "function_prototype": "",
          "line": 321,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1018,
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "issue_type_id": "taint",
      "severity": 4,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "sql_injection_python_89"
    },
    {
      "cwe_id": "89",
      "display_text": "\u003cspan\u003eThis database query contains a SQL injection flaw.  The call to flaskext.mysql.MySQL.cursors.Cursor.execute() constructs a dynamic SQL query using a variable derived from user-supplied input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. \u003c/span\u003e \u003cspan\u003eAvoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/89.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/SQL_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "api.py",
          "function_name": "deleteOrder",
          "function_prototype": "",
          "line": 324,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1019,
      "issue_type": "Improper Neutralization of Special Elements used in an SQL Command (\u0027SQL Injection\u0027)",
      "issue_type_id": "taint",
      "severity": 4,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "sql_injection_python_89"
    },
    {
      "cwe_id": "78",
      "display_text": "\u003cspan\u003eThis call to os.popen() contains a command injection flaw.  The argument to the function is constructed using user-supplied input.  If an attacker is allowed to specify all or part of the command, it may be possible to execute commands on the server with the privileges of the executing process.  The level of exposure depends on the effectiveness of input validation routines, if any. \u003c/span\u003e \u003cspan\u003eValidate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.  Most APIs that execute system commands also have a \"safe\" version of the method that takes an array of strings as input rather than a single string, which protects against some forms of command injection.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/78.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Command_Injection\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "api.py",
          "function_name": "run",
          "function_prototype": "",
          "line": 359,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1020,
      "issue_type": "Improper Neutralization of Special Elements used in an OS Command (\u0027OS Command Injection\u0027)",
      "issue_type_id": "taint",
      "severity": 5,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "externcmd_injection_python_78"
    },
    {
      "cwe_id": "73",
      "display_text": "\u003cspan\u003eThis call to flask.send_file() contains a path manipulation flaw.  The argument to the function is a filename constructed using user-supplied input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any. \u003c/span\u003e \u003cspan\u003eValidate all user-supplied input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.\u003c/span\u003e \u003cspan\u003eReferences: \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/73.html\"\u003eCWE\u003c/a\u003e \u003ca href\u003d\"https://owasp.org/www-community/attacks/Path_Traversal\"\u003eOWASP\u003c/a\u003e\u003c/span\u003e\n",
      "files": {
        "source_file": {
          "file": "api.py",
          "function_name": "readLog",
          "function_prototype": "",
          "line": 370,
          "qualified_function_name": "",
          "scope": ""
        }
      },
      "gob": "B",
      "issue_id": 1021,
      "issue_type": "External Control of File Name or Path",
      "issue_type_id": "taint",
      "severity": 3,
      "stack_dumps": {
        "stack_dump": []
      },
      "title": "path_manip_python_73"
    }
  ],
  "selected_modules": [],
  "pipeline_scan": "23.6.0-0",
  "dev_stage": "DEVELOPMENT"
}