name: Everything in a single workflow

# This workflow will checkout the code, ZIP the Python file, and create an artifact for use in following workflows.
on:
  # Enables manual runs
  workflow_dispatch:
  # Runs "Every Sunday" (see https://crontab.guru)
  schedule:
  - cron: "0 22 * * 1,3,5"

jobs:
  Checkout-Artifact-Scan:
    runs-on: [ubuntu-latest]
    steps:

# Checkout
      - uses: actions/checkout@v2
            
# Create artifact
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3.1.0
        with:
          name: petstore-api-python.zip
          path: |
           apy.py
           requirements.txt
           Dockerfile
           start.sh
     
# Artifact the Veracode DAST config to use in a following workflow     
      - name: Upload DAST Config for Later Use
        uses: actions/upload-artifact@v3.1.0
        with:
        # Artifact name
          name: Veracode-DAST-Config
          path: vc-dast-config.json
           
      - name: ZIP up required files application files for SAST scan
        run: |
         zip petstore-api-python-app.zip api.py requirements.txt
         
      - name: List folder contents for visual
        run: |
         ls -la    

# Submit to Veracode for SAST and SCA Scan
      - name: Veracode Upload and Scan Action Step
        uses: veracode/veracode-uploadandscan-action@master
        id: upload_and_scan
        with:
          appname: 'PetstoreAPI-Python-GitHub'
          createprofile: false
          version: '${{ github.run_id }}-'
          criticality: Medium
          filepath: 'petstore-api-python-app.zip'
          vid: '${{ secrets.VERACODE_API_ID }}'
          vkey: '${{ secrets.VERACODE_API_KEY }}'
        continue-on-error: true  
        
# Dockerize and Publish
  Dockerize-Publish:
    runs-on: [ubuntu-latest]
    needs: Checkout-Artifact-Scan
    steps:
      - uses: actions/checkout@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
         username: ${{ secrets.DOCKERHUB_USERNAME }}
         password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v3.2.0
        with:
          context: .
          push: true
          tags: veracodedemolabs/petstore_api_python_github:latest
          
# Deploy and run the Docker image for QA and DAST testing
  Deploy-Docker-Image-QA-Server:
    runs-on: [self-hosted]
    needs: Dockerize-Publish
    steps:         
      - name: Terminate previous QA Docker image to run new version
        run: |
         docker stop petstore_api_python_github
         docker rm petstore_api_python_github
        continue-on-error: true
       
# Pull new Docker image to QA web server
      - name: Pull new Docker image to QA web server
        run: |
         docker pull veracodedemolabs/petstore_api_python_github:latest
         
# Run Docker image on QA webserver for testing
      - name: Run Docker image
        run: |
         docker run -d --name petstore_api_python_github -p 5000:5000 veracodedemolabs/petstore_api_python_github:latest

# Submit DAST Scan against QA server.  We use the veracode/api-signing image for this.
  Submit-DAST-Scan:
    runs-on: ubuntu-latest
    needs: Deploy-Docker-Image-QA-Server
    container: 
      image: veracode/api-signing:latest
    steps:            

# Download the Veracode DAST Config artifact from workflow 1-Checkout-Build-Artifact.yml

      - name: Download Veracode-DAST-Config
        uses: actions/download-artifact@v3.0.1
        with:
          # Artifact name
          name: Veracode-DAST-Config
          # Destination path
          path: /tmp/

# Update the DAST Scan Name to be uniuqe (action: update find / replace text)        
      - name: Update DAST config file with uniuqe scan name
        run: |
         cd /tmp
         NOW=$(date +"%m-%d-%Y-%T")
         sed -i 's/Petstore_API_Python_Github/Petstore_API_Python_Github-'${NOW}'/g' vc-dast-config.json

# Visual confirmation of the scan submission details
      - name: Display DAST config file with uniuqe scan name
        run: |
          cat /tmp/vc-dast-config.json
          
# DAST scan submission using the DAST API 
      - name: Submit Veracode DAST Scan
        run: |
         export VERACODE_API_KEY_ID=${{ secrets.VERACODE_API_ID }}
         export VERACODE_API_KEY_SECRET=${{ secrets.VERACODE_API_KEY }}
         http --auth-type=veracode_hmac POST "https://api.veracode.com/was/configservice/v1/analyses?job_options=run_verification=false&scan_type=API_SCAN" < /tmp/vc-dast-config.json 
